Selection: 5

  |                                                                                              |   0%

| Missing values play an important role in statistics and data analysis. Often, missing values must not
| be ignored, but rather they should be carefully studied to see if there's an underlying pattern or
| cause for their missingness.

...

  |=====                                                                                         |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in the statistical
| sense). In this lesson, we'll explore missing values further.

...

  |=========                                                                                     |  10%
| Any operation involving NA generally yields NA as the result. To illustrate, let's create a vector
| c(44, NA, 5, NA) and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| You got it right!

  |==============                                                                                |  15%
| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| All that practice is paying off!

  |===================                                                                           |  20%
| Notice that the elements of the resulting vector that correspond with the NA values in x are also NA.

...

  |========================                                                                      |  25%
| To make things a little more interesting, lets create a vector containing 1000 draws from a standard
| normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| You nailed it! Good job!

  |============================                                                                  |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| You are amazing!

  |=================================                                                             |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y and z) such that we
| don't know how many NAs we'll wind up with or what positions they'll occupy in our final vector --
| my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y,z),100)

| Keep working like that and you'll get there!

  |======================================                                                        |  40%
| Let's first ask the question of where our NAs are located in our data. The is.na() function tells us
| whether each element of a vector is NA. Call is.na() on my_data and assign the result to my_na.

> my_na <- is.na(my_data)

| You are doing so well!

  |==========================================                                                    |  45%
| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
 [17]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [33]  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
 [49] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE
 [65]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [81]  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE
 [97]  TRUE  TRUE FALSE  TRUE

| You are amazing!

  |===============================================                                               |  50%
| Everywhere you see a TRUE, you know the corresponding element of my_data is NA. Likewise, everywhere
| you see a FALSE, you know the corresponding element of my_data is one of our random draws from the
| standard normal distribution.

...

  |====================================================                                          |  55%
| In our previous discussion of logical operators, we introduced the `==` operator as a method of
| testing for equality between two objects. So, you might think the expression my_data == NA yields the
| same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [34] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [67] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
[100] NA

| That's correct!

  |========================================================                                      |  60%
| The reason you got a vector of all NAs is that NA is not really a value, but just a placeholder for a
| quantity that is not available. Therefore the logical expression is incomplete and R has no choice
| but to return a vector of the same length as my_data that contains all NAs.

...

  |=============================================================                                 |  65%
| Don't worry if that's a little confusing. The key takeaway is to be cautious when using logical
| expressions anytime NAs might creep in, since a single NA value can derail the entire thing.

...

  |==================================================================                            |  70%
| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for every NA and
| FALSE for every numeric value, we can compute the total number of NAs in our data.

...

  |======================================================================                        |  75%
| The trick is to recognize that underneath the surface, R represents TRUE as the number 1 and FALSE as
| the number 0. Therefore, if we take the sum of a bunch of TRUEs and FALSEs, we get the total number
| of TRUEs.

...

  |===========================================================================                   |  80%
| Let's give that a try here. Call the sum() function on my_na to count the total number of TRUEs in
| my_na, and thus the total number of NAs in my_data. Don't assign the result to a new variable.

> sum(my_na)
[1] 57

| You nailed it! Good job!

  |================================================================================              |  85%
| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that everything 'adds
| up'. Print my_data to the console.

> my_data
  [1]          NA          NA  0.83051074  0.50862319 -0.06283536 -0.27791391          NA          NA
  [9]  0.73081000 -0.74630667          NA          NA          NA          NA -0.91555061          NA
 [17]          NA -0.84437609 -1.59001320  1.36639641          NA          NA -0.72912012          NA
 [25]          NA          NA          NA          NA -0.50588156  1.95582364          NA -1.04716734
 [33]          NA -0.57145849  0.52288452  0.26041408          NA          NA          NA          NA
 [41]          NA          NA          NA  0.06118897  0.09247306          NA          NA  0.42689168
 [49] -0.80631741 -0.03259536  0.66047052          NA  0.59662724          NA          NA          NA
 [57]          NA          NA -0.15438548          NA  0.35300204          NA          NA          NA
 [65]          NA          NA          NA  0.03174098          NA -0.24543758          NA -1.25754659
 [73]          NA -1.99213925          NA  1.29653060  0.25540026          NA  2.43536463 -0.79255379
 [81]          NA -0.48940712          NA          NA -1.15673744 -0.17324838          NA -2.18862408
 [89]          NA  2.33368527  2.22064715          NA          NA -0.99458125          NA  1.25827325
 [97]          NA          NA  1.17326719          NA

| Keep up the great work!

  |=====================================================================================         |  90%
| Now that we've got NAs down pat, let's look at a second type of missing value -- NaN, which stands
| for 'not a number'. To generate NaN, try dividing (using a forward slash) 0 by 0 now.

> 
> 0/0
[1] NaN

| Excellent work!

  |=========================================================================================     |  95%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you subtract Inf from
| Inf?

> 
> Inf - Inf
[1] NaN

| All that hard work is paying off!
